# Enums

enum Token {
  unknown
  pwrd
  gvt
  gro
  dai
  usdc
  usdt
  uniswap_gvt_gro
  uniswap_gro_usdc
  curve_pwrd3crv
  balancer_gro_weth
}

enum TxType {
  core_deposit
  core_withdrawal
  staker_deposit
  staker_withdrawal
  transfer_in
  transfer_out
  claim
  multiclaim
  vest
  approval
}

enum Status {
  ok
  error
}

enum NetworkName {
  mainnet
  avalanche
}

# Entities

# master data
type MasterData @entity {
  id: ID! # 0x
  status: Status!
  networkId: Int!
  networkName: NetworkName!
  launchTimestamp: Int!
  gro_per_block: BigDecimal!
  total_alloc: BigDecimal!
  total_locked_amount: BigDecimal!
  total_bonus: BigDecimal!
  total_bonus_in: BigDecimal!
  total_bonus_out: BigDecimal!
  init_unlocked_percent: BigDecimal!
  global_start_time: Int!
  util_ratio: BigDecimal!
  util_ratio_limit: BigDecimal!
  gvault_release_factor: Int!
}

# latest token price
type Price @entity {
  id: ID! # 0x
  pwrd: BigDecimal!
  gvt: BigDecimal!
  gro: BigDecimal!
  weth: BigDecimal!
  dai: BigDecimal!
  usdc: BigDecimal!
  usdt: BigDecimal!
  threeCrv: BigDecimal!
  balancer_gro_weth: BigDecimal!
  uniswap_gvt_gro: BigDecimal!
  uniswap_gro_usdc: BigDecimal!
  curve_pwrd3crv: BigDecimal!
}

# latest factor
type Factor @entity {
  id: ID! # 0x
  pwrd: BigDecimal!
  gvt: BigDecimal!
}

#Â G2 strategy
type GVaultStrategy @entity {
  id: ID! #strategy address
  coin: String!
  metacoin: String!
  protocol: String!
  strat_name: String!
  strat_display_name: String!
  vault_name: String!
  vault_display_name: String!
  vault_address: Bytes!
  strategy_debt: BigDecimal!
  locked_profit: BigDecimal!
  block_strategy_reported: Int!
  block_strategy_withdraw: Int!
  harvests: [GVaultHarvest!] @derivedFrom(field: "strategyAddress")
}

# G2 Strategy harvest (from GVault)
type GVaultHarvest @entity {
  id: ID! # hash-logIndex
  strategyAddress: GVaultStrategy!
  gain: BigDecimal!
  loss: BigDecimal!
  debtPaid: BigDecimal!
  debtAdded: BigDecimal!
  lockedProfit: BigDecimal!
  excessLoss: BigDecimal!
  timestamp: Int!
}

# pool data
type PoolData @entity {
  id: ID! # pool id
  poolAddress: Bytes!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  total_supply: BigDecimal!
}

# staker data
type StakerData @entity {
  id: ID! # poolId
  lp_supply: BigDecimal!
  acc_gro_per_share: BigDecimal!
  alloc_point: BigDecimal!
  pool_share: BigDecimal!
  block_number: Int!
  block_timestamp: Int!
}

# pool swaps
type PoolSwap @entity {
  id: ID! # timestamp-poolId
  poolId: Int!
  block_timestamp: Int!
  block_number: Int!
  fromAddress: Bytes!
  amount0_in: BigDecimal!
  amount1_in: BigDecimal!
  amount0_out: BigDecimal!
  amount1_out: BigDecimal!
  toAddress: Bytes!
  virtual_price: BigDecimal!
}

# core protocol data
type CoreData @entity {
  id: ID! # 0x
  total_supply_gvt: BigDecimal!
  total_supply_pwrd_based: BigDecimal!
  total_supply_gro: BigDecimal!
  total_supply_uniswap_gvt_gro: BigDecimal!
  total_supply_uniswap_gro_usdc: BigDecimal!
  total_supply_curve_pwrd3crv: BigDecimal!
  total_supply_balancer_gro_weth: BigDecimal!
}

# user
type User @entity {
  id: ID! # userAddress
  transfers: [TransferTx!] @derivedFrom(field: "userAddress")
  approvals: [ApprovalTx!] @derivedFrom(field: "ownerAddress")
  claims: [ClaimTx!] @derivedFrom(field: "userAddress")
  totals: Totals! @derivedFrom(field: "userAddress")
  pools: [Pool!] @derivedFrom(field: "userAddress")
  vestingBonus: VestingBonus! @derivedFrom(field: "userAddress")
}

# aggregated amounts for personal stats
type Totals @entity {
  id: ID! # userAddress
  userAddress: User! # FK to User
  amount_added_pwrd: BigDecimal!
  amount_added_gvt: BigDecimal!
  amount_removed_pwrd: BigDecimal!
  amount_removed_gvt: BigDecimal!
  amount_added_gro: BigDecimal!
  amount_removed_gro: BigDecimal!
  amount_total_gro: BigDecimal!
  amount_added_gro_team: BigDecimal!
  amount_removed_gro_team: BigDecimal!
  amount_total_gro_team: BigDecimal!
  value_added_pwrd: BigDecimal!
  value_added_gvt: BigDecimal!
  value_added_total: BigDecimal!
  value_removed_pwrd: BigDecimal!
  value_removed_gvt: BigDecimal!
  value_removed_total: BigDecimal!
  net_value_pwrd: BigDecimal!
  net_value_gvt: BigDecimal!
  net_value_total: BigDecimal!
  net_amount_gvt: BigDecimal!
  net_based_amount_pwrd: BigDecimal!
}

# vesting bonus
type VestingBonus @entity {
  id: ID! # userAddress
  userAddress: User! # FK to User
  locked_gro: BigDecimal!
  net_reward: BigDecimal!
  claim_now: BigDecimal!
  vest_all: BigDecimal!
  vesting_gro: BigDecimal!
  latest_start_time: Int!
}

# staker pools
type Pool @entity {
  id: ID! # userAddress-poolId
  userAddress: User! # FK to User
  poolId: Int!
  net_reward: BigDecimal!
  reward_debt: BigDecimal!
  balance: BigDecimal! # rename to coinBalance
  claim_now: BigDecimal!
  vest_all: BigDecimal!
}

# gro protocol deposits, withdrawals & transfers
# staker deposits & withdrawals
type TransferTx @entity {
  id: ID! # hash-logIndex(-in|-out)
  contractAddress: Bytes!
  block: Int!
  timestamp: Int!
  hash: Bytes!
  type: TxType!
  token: Token!
  userAddress: User! # FK to User
  fromAddress: Bytes!
  toAddress: Bytes!
  coinAmount: BigDecimal!
  usdAmount: BigDecimal!
  poolId: Int
  factor: BigDecimal!
}

# gro protocol approvals
type ApprovalTx @entity {
  id: ID! # hash-logIndex
  contractAddress: Bytes!
  block: Int!
  timestamp: Int!
  hash: Bytes!
  type: TxType!
  token: Token!
  ownerAddress: User! # FK to User
  spenderAddress: Bytes
  coinAmount: BigDecimal!
  usdAmount: BigDecimal!
}

# staker claims
type ClaimTx @entity {
  id: ID! # hash-logIndex
  contractAddress: Bytes!
  block: Int!
  timestamp: Int!
  hash: Bytes!
  type: TxType!
  userAddress: User! # FK to User
  poolId: [Int!]!
  vest: Boolean
  amount: BigDecimal!
}
