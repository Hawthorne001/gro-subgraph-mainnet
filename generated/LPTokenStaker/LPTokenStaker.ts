// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogAddPool extends ethereum.Event {
  get params(): LogAddPool__Params {
    return new LogAddPool__Params(this);
  }
}

export class LogAddPool__Params {
  _event: LogAddPool;

  constructor(event: LogAddPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogClaim extends ethereum.Event {
  get params(): LogClaim__Params {
    return new LogClaim__Params(this);
  }
}

export class LogClaim__Params {
  _event: LogClaim;

  constructor(event: LogClaim) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vest(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get pid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogDeposit extends ethereum.Event {
  get params(): LogDeposit__Params {
    return new LogDeposit__Params(this);
  }
}

export class LogDeposit__Params {
  _event: LogDeposit;

  constructor(event: LogDeposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogEmergencyWithdraw extends ethereum.Event {
  get params(): LogEmergencyWithdraw__Params {
    return new LogEmergencyWithdraw__Params(this);
  }
}

export class LogEmergencyWithdraw__Params {
  _event: LogEmergencyWithdraw;

  constructor(event: LogEmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogGroPerBlock extends ethereum.Event {
  get params(): LogGroPerBlock__Params {
    return new LogGroPerBlock__Params(this);
  }
}

export class LogGroPerBlock__Params {
  _event: LogGroPerBlock;

  constructor(event: LogGroPerBlock) {
    this._event = event;
  }

  get newGro(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogLpTokenAdded extends ethereum.Event {
  get params(): LogLpTokenAdded__Params {
    return new LogLpTokenAdded__Params(this);
  }
}

export class LogLpTokenAdded__Params {
  _event: LogLpTokenAdded;

  constructor(event: LogLpTokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogMaxGroPerBlock extends ethereum.Event {
  get params(): LogMaxGroPerBlock__Params {
    return new LogMaxGroPerBlock__Params(this);
  }
}

export class LogMaxGroPerBlock__Params {
  _event: LogMaxGroPerBlock;

  constructor(event: LogMaxGroPerBlock) {
    this._event = event;
  }

  get newMax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogMigrate extends ethereum.Event {
  get params(): LogMigrate__Params {
    return new LogMigrate__Params(this);
  }
}

export class LogMigrate__Params {
  _event: LogMigrate;

  constructor(event: LogMigrate) {
    this._event = event;
  }

  get pids(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class LogMigrateFrom extends ethereum.Event {
  get params(): LogMigrateFrom__Params {
    return new LogMigrateFrom__Params(this);
  }
}

export class LogMigrateFrom__Params {
  _event: LogMigrateFrom;

  constructor(event: LogMigrateFrom) {
    this._event = event;
  }

  get pids(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class LogMigrateFromV1 extends ethereum.Event {
  get params(): LogMigrateFromV1__Params {
    return new LogMigrateFromV1__Params(this);
  }
}

export class LogMigrateFromV1__Params {
  _event: LogMigrateFromV1;

  constructor(event: LogMigrateFromV1) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogMigrateUser extends ethereum.Event {
  get params(): LogMigrateUser__Params {
    return new LogMigrateUser__Params(this);
  }
}

export class LogMigrateUser__Params {
  _event: LogMigrateUser;

  constructor(event: LogMigrateUser) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pids(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class LogMultiClaim extends ethereum.Event {
  get params(): LogMultiClaim__Params {
    return new LogMultiClaim__Params(this);
  }
}

export class LogMultiClaim__Params {
  _event: LogMultiClaim;

  constructor(event: LogMultiClaim) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vest(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get pids(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogMultiWithdraw extends ethereum.Event {
  get params(): LogMultiWithdraw__Params {
    return new LogMultiWithdraw__Params(this);
  }
}

export class LogMultiWithdraw__Params {
  _event: LogMultiWithdraw;

  constructor(event: LogMultiWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pids(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class LogNewManagment extends ethereum.Event {
  get params(): LogNewManagment__Params {
    return new LogNewManagment__Params(this);
  }
}

export class LogNewManagment__Params {
  _event: LogNewManagment;

  constructor(event: LogNewManagment) {
    this._event = event;
  }

  get newManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogNewPwrdPid extends ethereum.Event {
  get params(): LogNewPwrdPid__Params {
    return new LogNewPwrdPid__Params(this);
  }
}

export class LogNewPwrdPid__Params {
  _event: LogNewPwrdPid;

  constructor(event: LogNewPwrdPid) {
    this._event = event;
  }

  get pPid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogNewStaker extends ethereum.Event {
  get params(): LogNewStaker__Params {
    return new LogNewStaker__Params(this);
  }
}

export class LogNewStaker__Params {
  _event: LogNewStaker;

  constructor(event: LogNewStaker) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogNewVester extends ethereum.Event {
  get params(): LogNewVester__Params {
    return new LogNewVester__Params(this);
  }
}

export class LogNewVester__Params {
  _event: LogNewVester;

  constructor(event: LogNewVester) {
    this._event = event;
  }

  get newVester(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogOldStaker extends ethereum.Event {
  get params(): LogOldStaker__Params {
    return new LogOldStaker__Params(this);
  }
}

export class LogOldStaker__Params {
  _event: LogOldStaker;

  constructor(event: LogOldStaker) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetPool extends ethereum.Event {
  get params(): LogSetPool__Params {
    return new LogSetPool__Params(this);
  }
}

export class LogSetPool__Params {
  _event: LogSetPool;

  constructor(event: LogSetPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogSetStatus extends ethereum.Event {
  get params(): LogSetStatus__Params {
    return new LogSetStatus__Params(this);
  }
}

export class LogSetStatus__Params {
  _event: LogSetStatus;

  constructor(event: LogSetStatus) {
    this._event = event;
  }

  get pause(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LogSetTimelock extends ethereum.Event {
  get params(): LogSetTimelock__Params {
    return new LogSetTimelock__Params(this);
  }
}

export class LogSetTimelock__Params {
  _event: LogSetTimelock;

  constructor(event: LogSetTimelock) {
    this._event = event;
  }

  get timelock(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogUpdatePool extends ethereum.Event {
  get params(): LogUpdatePool__Params {
    return new LogUpdatePool__Params(this);
  }
}

export class LogUpdatePool__Params {
  _event: LogUpdatePool;

  constructor(event: LogUpdatePool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lastRewardBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accGroPerShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogUserMigrateFromV1 extends ethereum.Event {
  get params(): LogUserMigrateFromV1__Params {
    return new LogUserMigrateFromV1__Params(this);
  }
}

export class LogUserMigrateFromV1__Params {
  _event: LogUserMigrateFromV1;

  constructor(event: LogUserMigrateFromV1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogWithdraw extends ethereum.Event {
  get params(): LogWithdraw__Params {
    return new LogWithdraw__Params(this);
  }
}

export class LogWithdraw__Params {
  _event: LogWithdraw;

  constructor(event: LogWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LPTokenStaker__poolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getAccGroPerShare(): BigInt {
    return this.value0;
  }

  getAllocPoint(): BigInt {
    return this.value1;
  }

  getLastRewardBlock(): BigInt {
    return this.value2;
  }

  getLpToken(): Address {
    return this.value3;
  }
}

export class LPTokenStaker__updatePoolResultPoolStruct extends ethereum.Tuple {
  get accGroPerShare(): BigInt {
    return this[0].toBigInt();
  }

  get allocPoint(): BigInt {
    return this[1].toBigInt();
  }

  get lastRewardBlock(): BigInt {
    return this[2].toBigInt();
  }

  get lpToken(): Address {
    return this[3].toAddress();
  }
}

export class LPTokenStaker__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getRewardDebt(): BigInt {
    return this.value1;
  }
}

export class LPTokenStaker extends ethereum.SmartContract {
  static bind(address: Address): LPTokenStaker {
    return new LPTokenStaker("LPTokenStaker", address);
  }

  PWRD(): Address {
    let result = super.call("PWRD", "PWRD():(address)", []);

    return result[0].toAddress();
  }

  try_PWRD(): ethereum.CallResult<Address> {
    let result = super.tryCall("PWRD", "PWRD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TIME_LOCK(): Address {
    let result = super.call("TIME_LOCK", "TIME_LOCK():(address)", []);

    return result[0].toAddress();
  }

  try_TIME_LOCK(): ethereum.CallResult<Address> {
    let result = super.tryCall("TIME_LOCK", "TIME_LOCK():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  activeLpTokens(param0: Address): boolean {
    let result = super.call(
      "activeLpTokens",
      "activeLpTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_activeLpTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "activeLpTokens",
      "activeLpTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimable(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "claimable",
      "claimable(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimable(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimable",
      "claimable(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPwrd(user: Address): BigInt {
    let result = super.call("getUserPwrd", "getUserPwrd(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserPwrd(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserPwrd",
      "getUserPwrd(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groPerBlock(): BigInt {
    let result = super.call("groPerBlock", "groPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_groPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("groPerBlock", "groPerBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxGroPerBlock(): BigInt {
    let result = super.call("maxGroPerBlock", "maxGroPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxGroPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxGroPerBlock",
      "maxGroPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  migratedFromV1(): boolean {
    let result = super.call("migratedFromV1", "migratedFromV1():(bool)", []);

    return result[0].toBoolean();
  }

  try_migratedFromV1(): ethereum.CallResult<boolean> {
    let result = super.tryCall("migratedFromV1", "migratedFromV1():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newStaker(): Address {
    let result = super.call("newStaker", "newStaker():(address)", []);

    return result[0].toAddress();
  }

  try_newStaker(): ethereum.CallResult<Address> {
    let result = super.tryCall("newStaker", "newStaker():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oldStaker(): Address {
    let result = super.call("oldStaker", "oldStaker():(address)", []);

    return result[0].toAddress();
  }

  try_oldStaker(): ethereum.CallResult<Address> {
    let result = super.tryCall("oldStaker", "oldStaker():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pPid(): BigInt {
    let result = super.call("pPid", "pPid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pPid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pPid", "pPid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolInfo(param0: BigInt): LPTokenStaker__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LPTokenStaker__poolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<LPTokenStaker__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LPTokenStaker__poolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updatePool(pid: BigInt): LPTokenStaker__updatePoolResultPoolStruct {
    let result = super.call(
      "updatePool",
      "updatePool(uint256):((uint256,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(pid)]
    );

    return changetype<LPTokenStaker__updatePoolResultPoolStruct>(
      result[0].toTuple()
    );
  }

  try_updatePool(
    pid: BigInt
  ): ethereum.CallResult<LPTokenStaker__updatePoolResultPoolStruct> {
    let result = super.tryCall(
      "updatePool",
      "updatePool(uint256):((uint256,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LPTokenStaker__updatePoolResultPoolStruct>(value[0].toTuple())
    );
  }

  userInfo(param0: BigInt, param1: Address): LPTokenStaker__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new LPTokenStaker__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<LPTokenStaker__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LPTokenStaker__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  userMigrated(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "userMigrated",
      "userMigrated(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_userMigrated(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "userMigrated",
      "userMigrated(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vesting(): Address {
    let result = super.call("vesting", "vesting():(address)", []);

    return result[0].toAddress();
  }

  try_vesting(): ethereum.CallResult<Address> {
    let result = super.tryCall("vesting", "vesting():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _timelock(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get vest(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateFromCall extends ethereum.Call {
  get inputs(): MigrateFromCall__Inputs {
    return new MigrateFromCall__Inputs(this);
  }

  get outputs(): MigrateFromCall__Outputs {
    return new MigrateFromCall__Outputs(this);
  }
}

export class MigrateFromCall__Inputs {
  _call: MigrateFromCall;

  constructor(call: MigrateFromCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MigrateFromCall__Outputs {
  _call: MigrateFromCall;

  constructor(call: MigrateFromCall) {
    this._call = call;
  }
}

export class MigrateFromV1Call extends ethereum.Call {
  get inputs(): MigrateFromV1Call__Inputs {
    return new MigrateFromV1Call__Inputs(this);
  }

  get outputs(): MigrateFromV1Call__Outputs {
    return new MigrateFromV1Call__Outputs(this);
  }
}

export class MigrateFromV1Call__Inputs {
  _call: MigrateFromV1Call;

  constructor(call: MigrateFromV1Call) {
    this._call = call;
  }
}

export class MigrateFromV1Call__Outputs {
  _call: MigrateFromV1Call;

  constructor(call: MigrateFromV1Call) {
    this._call = call;
  }
}

export class MigrateUserCall extends ethereum.Call {
  get inputs(): MigrateUserCall__Inputs {
    return new MigrateUserCall__Inputs(this);
  }

  get outputs(): MigrateUserCall__Outputs {
    return new MigrateUserCall__Outputs(this);
  }
}

export class MigrateUserCall__Inputs {
  _call: MigrateUserCall;

  constructor(call: MigrateUserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MigrateUserCall__Outputs {
  _call: MigrateUserCall;

  constructor(call: MigrateUserCall) {
    this._call = call;
  }
}

export class MultiClaimCall extends ethereum.Call {
  get inputs(): MultiClaimCall__Inputs {
    return new MultiClaimCall__Inputs(this);
  }

  get outputs(): MultiClaimCall__Outputs {
    return new MultiClaimCall__Outputs(this);
  }
}

export class MultiClaimCall__Inputs {
  _call: MultiClaimCall;

  constructor(call: MultiClaimCall) {
    this._call = call;
  }

  get vest(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MultiClaimCall__Outputs {
  _call: MultiClaimCall;

  constructor(call: MultiClaimCall) {
    this._call = call;
  }
}

export class MultiWithdrawCall extends ethereum.Call {
  get inputs(): MultiWithdrawCall__Inputs {
    return new MultiWithdrawCall__Inputs(this);
  }

  get outputs(): MultiWithdrawCall__Outputs {
    return new MultiWithdrawCall__Outputs(this);
  }
}

export class MultiWithdrawCall__Inputs {
  _call: MultiWithdrawCall;

  constructor(call: MultiWithdrawCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MultiWithdrawCall__Outputs {
  _call: MultiWithdrawCall;

  constructor(call: MultiWithdrawCall) {
    this._call = call;
  }
}

export class MultiWithdrawAndClaimCall extends ethereum.Call {
  get inputs(): MultiWithdrawAndClaimCall__Inputs {
    return new MultiWithdrawAndClaimCall__Inputs(this);
  }

  get outputs(): MultiWithdrawAndClaimCall__Outputs {
    return new MultiWithdrawAndClaimCall__Outputs(this);
  }
}

export class MultiWithdrawAndClaimCall__Inputs {
  _call: MultiWithdrawAndClaimCall;

  constructor(call: MultiWithdrawAndClaimCall) {
    this._call = call;
  }

  get vest(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MultiWithdrawAndClaimCall__Outputs {
  _call: MultiWithdrawAndClaimCall;

  constructor(call: MultiWithdrawAndClaimCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetGroPerBlockCall extends ethereum.Call {
  get inputs(): SetGroPerBlockCall__Inputs {
    return new SetGroPerBlockCall__Inputs(this);
  }

  get outputs(): SetGroPerBlockCall__Outputs {
    return new SetGroPerBlockCall__Outputs(this);
  }
}

export class SetGroPerBlockCall__Inputs {
  _call: SetGroPerBlockCall;

  constructor(call: SetGroPerBlockCall) {
    this._call = call;
  }

  get _groPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGroPerBlockCall__Outputs {
  _call: SetGroPerBlockCall;

  constructor(call: SetGroPerBlockCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetMaxGroPerBlockCall extends ethereum.Call {
  get inputs(): SetMaxGroPerBlockCall__Inputs {
    return new SetMaxGroPerBlockCall__Inputs(this);
  }

  get outputs(): SetMaxGroPerBlockCall__Outputs {
    return new SetMaxGroPerBlockCall__Outputs(this);
  }
}

export class SetMaxGroPerBlockCall__Inputs {
  _call: SetMaxGroPerBlockCall;

  constructor(call: SetMaxGroPerBlockCall) {
    this._call = call;
  }

  get _maxGroPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxGroPerBlockCall__Outputs {
  _call: SetMaxGroPerBlockCall;

  constructor(call: SetMaxGroPerBlockCall) {
    this._call = call;
  }
}

export class SetNewStakerCall extends ethereum.Call {
  get inputs(): SetNewStakerCall__Inputs {
    return new SetNewStakerCall__Inputs(this);
  }

  get outputs(): SetNewStakerCall__Outputs {
    return new SetNewStakerCall__Outputs(this);
  }
}

export class SetNewStakerCall__Inputs {
  _call: SetNewStakerCall;

  constructor(call: SetNewStakerCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewStakerCall__Outputs {
  _call: SetNewStakerCall;

  constructor(call: SetNewStakerCall) {
    this._call = call;
  }
}

export class SetOldStakerCall extends ethereum.Call {
  get inputs(): SetOldStakerCall__Inputs {
    return new SetOldStakerCall__Inputs(this);
  }

  get outputs(): SetOldStakerCall__Outputs {
    return new SetOldStakerCall__Outputs(this);
  }
}

export class SetOldStakerCall__Inputs {
  _call: SetOldStakerCall;

  constructor(call: SetOldStakerCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOldStakerCall__Outputs {
  _call: SetOldStakerCall;

  constructor(call: SetOldStakerCall) {
    this._call = call;
  }
}

export class SetPwrdPidCall extends ethereum.Call {
  get inputs(): SetPwrdPidCall__Inputs {
    return new SetPwrdPidCall__Inputs(this);
  }

  get outputs(): SetPwrdPidCall__Outputs {
    return new SetPwrdPidCall__Outputs(this);
  }
}

export class SetPwrdPidCall__Inputs {
  _call: SetPwrdPidCall;

  constructor(call: SetPwrdPidCall) {
    this._call = call;
  }

  get _pPid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPwrdPidCall__Outputs {
  _call: SetPwrdPidCall;

  constructor(call: SetPwrdPidCall) {
    this._call = call;
  }
}

export class SetStatusCall extends ethereum.Call {
  get inputs(): SetStatusCall__Inputs {
    return new SetStatusCall__Inputs(this);
  }

  get outputs(): SetStatusCall__Outputs {
    return new SetStatusCall__Outputs(this);
  }
}

export class SetStatusCall__Inputs {
  _call: SetStatusCall;

  constructor(call: SetStatusCall) {
    this._call = call;
  }

  get pause(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStatusCall__Outputs {
  _call: SetStatusCall;

  constructor(call: SetStatusCall) {
    this._call = call;
  }
}

export class SetVestingCall extends ethereum.Call {
  get inputs(): SetVestingCall__Inputs {
    return new SetVestingCall__Inputs(this);
  }

  get outputs(): SetVestingCall__Outputs {
    return new SetVestingCall__Outputs(this);
  }
}

export class SetVestingCall__Inputs {
  _call: SetVestingCall;

  constructor(call: SetVestingCall) {
    this._call = call;
  }

  get _vesting(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVestingCall__Outputs {
  _call: SetVestingCall;

  constructor(call: SetVestingCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get pool(): UpdatePoolCallPoolStruct {
    return changetype<UpdatePoolCallPoolStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class UpdatePoolCallPoolStruct extends ethereum.Tuple {
  get accGroPerShare(): BigInt {
    return this[0].toBigInt();
  }

  get allocPoint(): BigInt {
    return this[1].toBigInt();
  }

  get lastRewardBlock(): BigInt {
    return this[2].toBigInt();
  }

  get lpToken(): Address {
    return this[3].toAddress();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAndClaimCall extends ethereum.Call {
  get inputs(): WithdrawAndClaimCall__Inputs {
    return new WithdrawAndClaimCall__Inputs(this);
  }

  get outputs(): WithdrawAndClaimCall__Outputs {
    return new WithdrawAndClaimCall__Outputs(this);
  }
}

export class WithdrawAndClaimCall__Inputs {
  _call: WithdrawAndClaimCall;

  constructor(call: WithdrawAndClaimCall) {
    this._call = call;
  }

  get vest(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawAndClaimCall__Outputs {
  _call: WithdrawAndClaimCall;

  constructor(call: WithdrawAndClaimCall) {
    this._call = call;
  }
}
